package Aggregate1;

import java.io.File;
import javax.swing.JFileChooser;
import MAPSCANREDCUE.Utilz;
//import com.jlmd.AdaptiveNeuroFuzzyScheduler.neuralnetwork.Throughput;
import com.jlmd.AdaptiveNeuroFuzzyScheduler.neuralnetwork.AdaptiveNeuroFuzzyScheduler;
import com.jlmd.AdaptiveNeuroFuzzyScheduler.neuralnetwork.callback.INeuralNetworkCallback;
import com.jlmd.AdaptiveNeuroFuzzyScheduler.neuralnetwork.entity.Job;
import com.jlmd.AdaptiveNeuroFuzzyScheduler.neuralnetwork.entity.Result;
import com.jlmd.AdaptiveNeuroFuzzyScheduler.neuralnetwork.exception.Energy;
import com.jlmd.AdaptiveNeuroFuzzyScheduler.neuralnetwork.transfer.Accuracy;
import com.jlmd.AdaptiveNeuroFuzzyScheduler.neuralnetwork.utils.DataUtils;
import hadoopmap.CPUPower;
import hadoopmap.DER;
import hadoopmap.DRT;
import hadoopmap.DeduplicationTime;
import hadoopmap.KeyGenrationTime;
import hadoopmap.MemoryConsumption;
import hadoopmap.OverallComputationTime;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.util.ToolRunner;
import org.jfree.data.xy.XYSeries;
import org.jfree.ui.RefineryUtilities;
import weka.clusterers.SimpleKMeans;
import weka.core.Instances;

/**
 *
 * @author code
 */
public class MainView extends javax.swing.JFrame {

    public static int sz = 0;
    Log hadooop = LogFactory.getLog("---------------------------");
    Log ENN = LogFactory.getLog("---------------------------------");
    Log CLUS= LogFactory.getLog("===================================");
    Log CNC= LogFactory.getLog("===================================");
    public MainView() {
        initComponents();
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jRadioButton1 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setBackground(new java.awt.Color(255, 0, 51));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("A Novel MAP-SCAN-REDUCE Based Density Peaks Clustering and Privacy Protection Approach for Large Data sets");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel2)
                                .addContainerGap(42, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 51), 2, true));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Load Data");

        jButton1.setBackground(new java.awt.Color(153, 0, 153));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Browse");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jRadioButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jRadioButton1.setForeground(new java.awt.Color(255, 0, 0));
        jRadioButton1.setText("Hadoop");
        jRadioButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(201, 201, 201)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(20, 20, 20)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton1))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(131, 131, 131)
                                                .addComponent(jRadioButton1)))
                                .addContainerGap(213, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton1))
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(54, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        File f;
        jFileChooser1.setVisible(true);

        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int fr = jFileChooser1.showOpenDialog(this);
        if (fr == JFileChooser.APPROVE_OPTION) {
            try {
                f = jFileChooser1.getSelectedFile();
                jTextField1.setText(f.getAbsolutePath());
                //BufferedReader br=new BufferedReader(new FileReader(f.getAbsolutePath()));

                //		SimpleKMeans kmeans = new SimpleKMeans();
//		kmeans.setSeed(10);
                //important parameter to set: preserver order, number of cluster.
//		kmeans.setPreserveInstancesOrder(true);
//		kmeans.setNumClusters(5);
                //BufferedReader datafile = readDataFile(f.getAbsolutePath()); 
//		Instances data = new Instances(br);
///		kmeans.buildClusterer(data);
                // This array returns the cluster number (starting with 0) for each instance
                // The array has as many elements as the number of instances
//		int[] assignments = kmeans.getAssignments();
///		int i=0;
//		for(int clusterNum : assignments) {
//		    System.out.printf("Instance %d -> Cluster %d \n", i, clusterNum);
//		    i++;
//		}
                sz = (int) (f.length() / 1024);

                System.out.println("Size of file==" + sz + "MB");

                String[] args;
                args = null;

                int res = ToolRunner.run(new JobConf(), new HDFS(), args);
                BufferedReader br = new BufferedReader(new FileReader(f.getAbsolutePath()));
                CLUS.info("Data Clustering Starting");
                SimpleKMeans kmeans = new SimpleKMeans();
                kmeans.setSeed(10);
                //important parameter to set: preserver order, number of cluster.
                kmeans.setPreserveInstancesOrder(true);
                kmeans.setNumClusters(5);
                //BufferedReader datafile = readDataFile(f.getAbsolutePath()); 
                Instances data = new Instances(br);
                kmeans.buildClusterer(data);
                // This array returns the cluster number (starting with 0) for each instance
                // The array has as many elements as the number of instances
                int[] assignments = kmeans.getAssignments();
                int i = 0;
                //Map<String, XYSeries> plottingDataSet = new HashMap<String, XYSeries>();
                //IntWritable key = new IntWritable();
                CNC.info("ClusterInstance->No.of Clusters");
                System.out.printf("\n");
                for (int clusterNum : assignments) {
                    System.out.printf("Instance %d -> Cluster %d \n", i,clusterNum);
                    i++;
                  //  plottingDataSet.put(key.toString(), new XYSeries("Cluster-"
//+ clusterNum));
                    
                    }
                
                
                
  //  ScatterPlot plot = new ScatterPlot("Output", 800,
//				plottingDataSet);
//		plot.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//		plot.pack();
//		plot.setLocationRelativeTo(null);
//		plot.setVisible(true);
                float[][] x = DataUtils.readInputsFromFile("data/x.txt");
                int[] t = DataUtils.readOutputsFromFile("data/t.txt");
                AdaptiveNeuroFuzzyScheduler fuzzyScheduler = new AdaptiveNeuroFuzzyScheduler(x, t, new INeuralNetworkCallback() {
                    @Override
                    public void success(Result result) {
                        ENN.info("ADAPTIVE NEURO FUZZY SCHEDULER : Done");
                        hadooop.info("QUEUE MANAGER STATUS : Done");
                        float[] valueToPredict = new float[]{-0.205f, 0.780f};
                        System.out.println("Accuracy percentage: " + result.getSuccessPercentage());
                        System.out.println("Predicted result: " + result.predictValue(valueToPredict));
                        //SwingUtilities.invokeLater(() -> {
                         //   Throughput ex = new Throughput();
                         //   ex.setVisible(true);
                       // });
                        SwingUtilities.invokeLater(() -> {
                            Job exs = new Job();
                            exs.setVisible(true);
                        });
                        SwingUtilities.invokeLater(() -> {
                            Utilz exs = new Utilz();
                            exs.setVisible(true);
                        });
                        final Accuracy obj = new Accuracy("Dataset Size vs Execution Time");
                        obj.pack();
                        RefineryUtilities.centerFrameOnScreen(obj);
                        obj.setVisible(true);

                       // SwingUtilities.invokeLater(() -> {
                        //    Energy ex = new Energy();
                         //   ex.setVisible(true);
                        //});
                    }

                    @Override
                    public void failure(com.jlmd.AdaptiveNeuroFuzzyScheduler.neuralnetwork.entity.Error error) {
                        System.out.println("Error: " + error.getDescription());
                    }
                });

                fuzzyScheduler.startLearning();

                /*       if (worker.getState() == SwingWorker.StateValue.DONE || worker.getState() == SwingWorker.StateValue.STARTED) {
                    worker.cancel(true);
                    worker = new MyWorker();
                }
                worker.execute();*/
            } catch (Exception ex) {
                // Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
//        DataTraffic.getGoodput(sz);
        //    Amazoncloud.main();

    }

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}
